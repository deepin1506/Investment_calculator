{"ast":null,"code":"var _jsxFileName = \"F:\\\\Investment_calculator\\\\src\\\\App.js\";\nimport InvestForm from \"./components/UserInput/InvestForm\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport Header from \"./components/Header/Header\";\nimport Investments from \"./components/ResultsTable/ResultsTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    //  do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(Header, {\n    children: [/*#__PURE__*/_jsxDEV(InvestForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Investments, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this)\n\n  // <div>\n  //   <header className=\"header\">\n  //     <img src={logo} alt=\"logo\" />\n  //     <h1>Investment Calculator</h1>\n  //   </header>\n\n  /* <form className=\"form\">\n      <div className=\"input-group\">\n        <p>\n          <label htmlFor=\"current-savings\">Current Savings ($)</label>\n          <input type=\"number\" id=\"current-savings\" />\n        </p>\n        <p>\n          <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n          <input type=\"number\" id=\"yearly-contribution\" />\n        </p>\n      </div> */\n  /* //   <div className=\"input-group\">\n    //     <p>\n    //       <label htmlFor=\"expected-return\">\n    //         Expected Interest (%, per year)\n    //       </label>\n    //       <input type=\"number\" id=\"expected-return\" />\n    //     </p>\n    //     <p>\n    //       <label htmlFor=\"duration\">Investment Duration (years)</label>\n    //       <input type=\"number\" id=\"duration\" />\n    //     </p>\n    //   </div>\n    //   <p className=\"actions\">\n    //     <button type=\"reset\" className=\"buttonAlt\">\n    //       Reset\n    //     </button>\n    //     <button type=\"submit\" className=\"button\">\n    //       Calculate\n    //     </button>\n    //   </p>\n    // </form> */\n\n  /* Todo: Show below table conditionally (only once result data is available) */\n  /* Show fallback text if no data is available */\n\n  //     <table className=\"result\">\n  //       <thead>\n  //         <tr>\n  //           <th>Year</th>\n  //           <th>Total Savings</th>\n  //           <th>Interest (Year)</th>\n  //           <th>Total Interest</th>\n  //           <th>Invested Capital</th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>\n  //         <tr>\n  //           <td>YEAR NUMBER</td>\n  //           <td>TOTAL SAVINGS END OF YEAR</td>\n  //           <td>INTEREST GAINED IN YEAR</td>\n  //           <td>TOTAL INTEREST GAINED</td>\n  //           <td>TOTAL INVESTED CAPITAL</td>\n  //         </tr>\n  //       </tbody>\n  //     </table>\n  //   </div>\n  ;\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["InvestForm","ResultsTable","Header","Investments","jsxDEV","_jsxDEV","App","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Investment_calculator/src/App.js"],"sourcesContent":["import InvestForm from \"./components/UserInput/InvestForm\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport Header from \"./components/Header/Header\";\nimport Investments from \"./components/ResultsTable/ResultsTable\";\nfunction App() {\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    //  do something with yearlyData ...\n  };\n\n  return (\n    <Header>\n      <InvestForm></InvestForm>\n      <Investments></Investments>\n    </Header>\n\n    // <div>\n    //   <header className=\"header\">\n    //     <img src={logo} alt=\"logo\" />\n    //     <h1>Investment Calculator</h1>\n    //   </header>\n\n    /* <form className=\"form\">\n        <div className=\"input-group\">\n          <p>\n            <label htmlFor=\"current-savings\">Current Savings ($)</label>\n            <input type=\"number\" id=\"current-savings\" />\n          </p>\n          <p>\n            <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n            <input type=\"number\" id=\"yearly-contribution\" />\n          </p>\n        </div> */\n    /* //   <div className=\"input-group\">\n      //     <p>\n      //       <label htmlFor=\"expected-return\">\n      //         Expected Interest (%, per year)\n      //       </label>\n      //       <input type=\"number\" id=\"expected-return\" />\n      //     </p>\n      //     <p>\n      //       <label htmlFor=\"duration\">Investment Duration (years)</label>\n      //       <input type=\"number\" id=\"duration\" />\n      //     </p>\n      //   </div>\n      //   <p className=\"actions\">\n      //     <button type=\"reset\" className=\"buttonAlt\">\n      //       Reset\n      //     </button>\n      //     <button type=\"submit\" className=\"button\">\n      //       Calculate\n      //     </button>\n      //   </p>\n      // </form> */\n\n    /* Todo: Show below table conditionally (only once result data is available) */\n    /* Show fallback text if no data is available */\n\n    //     <table className=\"result\">\n    //       <thead>\n    //         <tr>\n    //           <th>Year</th>\n    //           <th>Total Savings</th>\n    //           <th>Interest (Year)</th>\n    //           <th>Total Interest</th>\n    //           <th>Invested Capital</th>\n    //         </tr>\n    //       </thead>\n    //       <tbody>\n    //         <tr>\n    //           <td>YEAR NUMBER</td>\n    //           <td>TOTAL SAVINGS END OF YEAR</td>\n    //           <td>INTEREST GAINED IN YEAR</td>\n    //           <td>TOTAL INTEREST GAINED</td>\n    //           <td>TOTAL INVESTED CAPITAL</td>\n    //         </tr>\n    //       </tbody>\n    //     </table>\n    //   </div>\n  );\n}\nexport default App;\n"],"mappings":";AAAA,OAAOA,UAAU,MAAM,mCAAmC;AAC1D,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,WAAW,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjE,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,oBACEN,OAAA,CAACH,MAAM;IAAAiB,QAAA,gBACLd,OAAA,CAACL,UAAU;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eACzBlB,OAAA,CAACF,WAAW;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB;;EAER;EACA;EACA;EACA;EACA;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ;AAACC,EAAA,GAlGQlB,GAAG;AAmGZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}