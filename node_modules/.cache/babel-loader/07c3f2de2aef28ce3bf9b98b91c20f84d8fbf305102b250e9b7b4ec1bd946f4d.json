{"ast":null,"code":"var _jsxFileName = \"F:\\\\Investment_calculator\\\\src\\\\App.js\";\nimport UserInput from \"./components/UserInput/UserInput\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport Header from \"./components/Header/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = userInput => {\n    //   // Should be triggered when form is submitted\n    //   // You might not directly want to bind it to the submit event on the form though...\n    //   const yearlyData = []; // per-year results\n    //   let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    //   const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    //   const expectedReturn = +userInput[\"expected-return\"] / 100;\n    //   const duration = +userInput[\"duration\"];\n    //   // The below code calculates yearly results (total savings, interest etc)\n    //   for (let i = 0; i < duration; i++) {\n    //     const yearlyInterest = currentSavings * expectedReturn;\n    //     currentSavings += yearlyInterest + yearlyContribution;\n    //     yearlyData.push({\n    //       // feel free to change the shape of the data pushed to the array!\n    //       year: i + 1,\n    //       yearlyInterest: yearlyInterest,\n    //       savingsEndOfYear: currentSavings,\n    //       yearlyContribution: yearlyContribution,\n    //     });\n    //   }\n    //  do something with yearlyData ...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["UserInput","ResultsTable","Header","jsxDEV","_jsxDEV","App","calculateHandler","userInput","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Investment_calculator/src/App.js"],"sourcesContent":["import UserInput from \"./components/UserInput/UserInput\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  const calculateHandler = (userInput) => {\n    //   // Should be triggered when form is submitted\n    //   // You might not directly want to bind it to the submit event on the form though...\n    //   const yearlyData = []; // per-year results\n    //   let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    //   const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    //   const expectedReturn = +userInput[\"expected-return\"] / 100;\n    //   const duration = +userInput[\"duration\"];\n    //   // The below code calculates yearly results (total savings, interest etc)\n    //   for (let i = 0; i < duration; i++) {\n    //     const yearlyInterest = currentSavings * expectedReturn;\n    //     currentSavings += yearlyInterest + yearlyContribution;\n    //     yearlyData.push({\n    //       // feel free to change the shape of the data pushed to the array!\n    //       year: i + 1,\n    //       yearlyInterest: yearlyInterest,\n    //       savingsEndOfYear: currentSavings,\n    //       yearlyContribution: yearlyContribution,\n    //     });\n    //   }\n    //  do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n      <UserInput />\n      <ResultsTable />\n    </div>\n  );\n}\nexport default App;\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,kCAAkC;AACxD,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EAED,oBACEH,OAAA;IAAAI,QAAA,gBACEJ,OAAA,CAACF,MAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVR,OAAA,CAACJ,SAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACbR,OAAA,CAACH,YAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV;AAACC,EAAA,GA/BQR,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}